/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package controleatleta;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Luciano
 */
public class PnlAlterarDeletarPesquisarTenistaDeMesa extends javax.swing.JPanel {

    private final char CHAR_MASCULINO = 'M';
    private final char CHAR_FEMININO = 'F';
    private final int INT_MASCULINO = 0;
    private final int INT_FEMININO = 1;
    private final char CHAR_AMADOR = 'A';
    private final char CHAR_PROFISSIONAL = 'P';
    private final int INT_AMADOR = 0;
    private final int INT_PROFISSIONAL = 1;
    private final char CHAR_ORTODOXO = 'O'; //DESTRO
    private final char CHAR_SOUTHPAW = 'S'; //CANHOTO
    private final int INT_ORTODOXO = 0;
    private final int INT_SOUTHPAW = 1;
    
    private ControleTenistaDeMesa controleTenistaDeMesa;
    private DefaultListModel tenistasListModel;
    
    /**
     * Creates new form PnlAlterarDeletarPesquisarTenistaDeMesa
     */
    public PnlAlterarDeletarPesquisarTenistaDeMesa(ControleTenistaDeMesa controleTenistaDeMesa) {
        initComponents();
        this.controleTenistaDeMesa = controleTenistaDeMesa;
        tenistasListModel = new DefaultListModel();
        jListSelecionarTenista.setModel(tenistasListModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListSelecionarTenista = new javax.swing.JList();
        jButtonVisualizar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNome = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButtonPesquisar = new javax.swing.JButton();
        jButtonAlterar = new javax.swing.JButton();
        jButtonDeletar = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Digite o Nome do Tenista de Mesa:");

        jListSelecionarTenista.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jListSelecionarTenista);

        jButtonVisualizar.setText("Visualizar");
        jButtonVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualizarActionPerformed(evt);
            }
        });

        jLabel2.setText("(Pesquisa em branco mostra todos)");

        jLabel3.setText("Nome:");

        jButtonPesquisar.setText("Pesquisar");
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });

        jButtonAlterar.setText("Alterar");
        jButtonAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarActionPerformed(evt);
            }
        });

        jButtonDeletar.setText("Deletar");
        jButtonDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNome))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonPesquisar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonVisualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonAlterar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonDeletar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jButtonPesquisar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonVisualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAlterar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDeletar)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed
        // TODO add your handling code here:
        limparJList();
        String nomeTenista = jTextFieldNome.getText();
        try{
            if(nomeTenista.length() == 0)
                adicionarTodosOsTenistasNaJlist();
            else
                adicionarTenistaNaJList(nomeTenista);
        } catch(TenistaInvalidoException e){
            JOptionPane.showMessageDialog(null,"ERROR: " + e.getMessage(),"Erro",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jButtonVisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualizarActionPerformed
        // TODO add your handling code here:
        try{
            visualizarTenistaSelecionadoNaJList(false);
        } catch(TenistaInvalidoException e){
            JOptionPane.showMessageDialog(null,"ERROR: " + e.getMessage(),"Erro",JOptionPane.ERROR_MESSAGE);
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null,"ERROR: " + "Nao foi selecionado um Tenista de Mesa na lista","Erro",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonVisualizarActionPerformed

    private void jButtonAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarActionPerformed
        // TODO add your handling code here:
        try{
            visualizarTenistaSelecionadoNaJList(true);
        } catch(TenistaInvalidoException e){
            JOptionPane.showMessageDialog(null,"ERROR: " + e.getMessage(),"Erro",JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_jButtonAlterarActionPerformed

    private void jButtonDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletarActionPerformed
        // TODO add your handling code here:
        try{
            TenistaDeMesa tenistaDeMesa = criarTenistaSelecionadoNaJList();
            deletarTenistaDeMesa(tenistaDeMesa.getNome());
            tenistasListModel.removeElementAt(jListSelecionarTenista.getSelectedIndex());
        } catch(TenistaInvalidoException e){
            JOptionPane.showMessageDialog(null,"ERROR: " + e.getMessage(),"Erro",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonDeletarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAlterar;
    private javax.swing.JButton jButtonDeletar;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JButton jButtonVisualizar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jListSelecionarTenista;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldNome;
    // End of variables declaration//GEN-END:variables

    private void adicionarTodosOsTenistasNaJlist() throws TenistaInvalidoException{
        validarExistenciaDeTenistas();
        for(TenistaDeMesa tenista : controleTenistaDeMesa.getTenistas()){
            adicionarTenistaNaJList(tenista);
        }
    }
    
    private void adicionarTenistaNaJList(String nome) throws TenistaInvalidoException{
        TenistaDeMesa tenistaDeMesa = controleTenistaDeMesa.pesquisar(nome);
        adicionarTenistaNaJList(tenistaDeMesa);
    }
    
    private void adicionarTenistaNaJList(TenistaDeMesa tenistaDeMesa){
        tenistasListModel.addElement(tenistaDeMesa.getNome());
    }
    
    private void validarExistenciaDeTenistas() throws TenistaInvalidoException{
        if(controleTenistaDeMesa.getTenistas().isEmpty())
            throw new TenistaInvalidoException("Não há Tenista cadastrado");
    }
    
    private void limparJList(){
        tenistasListModel.removeAllElements();
    }
    
    private void visualizarTenistaSelecionadoNaJList(boolean podeMudarAtributosDoTenista) throws TenistaInvalidoException{
        TenistaDeMesa tenistaDeMesa = criarTenistaSelecionadoNaJList();
        criarJanelaComAtributosDoTenistaPesquisado(tenistaDeMesa, podeMudarAtributosDoTenista);
    }
    
    private TenistaDeMesa criarTenistaSelecionadoNaJList() throws TenistaInvalidoException{
        return controleTenistaDeMesa.pesquisar(jListSelecionarTenista.getSelectedValue().toString());
    }
    
    private void criarJanelaComAtributosDoTenistaPesquisado(TenistaDeMesa tenistaDeMesa, boolean podeMudarAtributosDoTenista){
        JFrame janelaComAtributos = new JFrame();
        PnlCadastrarTenistaDeMesa pnlCadastrarTenistaDeMesa[] = new PnlCadastrarTenistaDeMesa[1];
        pnlCadastrarTenistaDeMesa[0] = null;
        verificarSePainelVisualizaOuAltera(janelaComAtributos, pnlCadastrarTenistaDeMesa, podeMudarAtributosDoTenista);        
        definirDimensoesDaJanelaComOsAtributosDoTenistaPesquisado(janelaComAtributos, pnlCadastrarTenistaDeMesa[0]);
        carregarAtributosDoTenistaNosCamposDaJanelaComOsAtributosDoTenista(tenistaDeMesa, pnlCadastrarTenistaDeMesa[0]);
        inserirPainelNoJFrame(janelaComAtributos, pnlCadastrarTenistaDeMesa[0]);
    }
    
    private void inserirPainelNoJFrame(JFrame janelaComAtributos, PnlCadastrarTenistaDeMesa pnlCadastrarTenistaDeMesa){
        janelaComAtributos.add(pnlCadastrarTenistaDeMesa);
        janelaComAtributos.setVisible(true);
    }
    
    private void verificarSePainelVisualizaOuAltera(JFrame janelaComAtributos, PnlCadastrarTenistaDeMesa[] pnlCadastrarTenistaDeMesa, boolean podeMudarAtributosDoTenista){
        if(!podeMudarAtributosDoTenista){
            pnlCadastrarTenistaDeMesa[0] = new PnlCadastrarTenistaDeMesa(janelaComAtributos, controleTenistaDeMesa, true);
            bloquearCamposDaJanelaComOsAtributosDoTenista(pnlCadastrarTenistaDeMesa[0]);
            sumirOsBotoesDaJanelaComOsAtributosDoTenista(pnlCadastrarTenistaDeMesa[0]);
        }else{
            pnlCadastrarTenistaDeMesa[0] = new PnlCadastrarTenistaDeMesa(janelaComAtributos, controleTenistaDeMesa, false);
            permitirApenasBotaoAlterarDaJanelaComOsAtributosDoTenistaPesquisado(pnlCadastrarTenistaDeMesa[0]);
        }
    }
    
    private void permitirApenasBotaoAlterarDaJanelaComOsAtributosDoTenistaPesquisado(final PnlCadastrarTenistaDeMesa pnlCadastrarTenistaDeMesa){
        pnlCadastrarTenistaDeMesa.getjButtonCadastrar().setText("Alterar");
        pnlCadastrarTenistaDeMesa.getjButtonLimpar().setVisible(false);
        pnlCadastrarTenistaDeMesa.getjTextFieldNome().setEditable(false);
        pnlCadastrarTenistaDeMesa.getjButtonCadastrar().addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                try{
                    pnlCadastrarTenistaDeMesa.validarCampos();
                    deletarTenistaDeMesa(pnlCadastrarTenistaDeMesa.getjTextFieldNome().getText());
                    pnlCadastrarTenistaDeMesa.cadastrarTenistaDeMesa();
                    JOptionPane.showMessageDialog(null,"Alterar Tenista de Mesa: " + pnlCadastrarTenistaDeMesa.getjTextFieldNome().getText() +"\nRealizado com Sucesso!","Concluido",JOptionPane.INFORMATION_MESSAGE);
                } catch(CampoInvalidoException e){
                    JOptionPane.showMessageDialog(null,"ERROR: " + e.getMessage(),"Erro",JOptionPane.ERROR_MESSAGE);
                } catch(TenistaInvalidoException e){
                    JOptionPane.showMessageDialog(null,"ERROR: " + e.getMessage(),"Erro",JOptionPane.ERROR_MESSAGE);
                } catch(ParseException e){
                    JOptionPane.showMessageDialog(null,"ERROR: " + e.getMessage(),"Erro",JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        
    }
    
    private void definirDimensoesDaJanelaComOsAtributosDoTenistaPesquisado(JFrame janelaComAtributos, PnlCadastrarTenistaDeMesa painelComAtributos){
        janelaComAtributos.setMinimumSize(new Dimension(800, 600));
    }
    
    private void sumirOsBotoesDaJanelaComOsAtributosDoTenista(PnlCadastrarTenistaDeMesa pnlCadastrarTenistaDeMesa){
        pnlCadastrarTenistaDeMesa.getjButtonCadastrar().setVisible(false);
        pnlCadastrarTenistaDeMesa.getjButtonLimpar().setVisible(false);
        pnlCadastrarTenistaDeMesa.getjButtonAdicionarTelefone().setVisible(false);
        pnlCadastrarTenistaDeMesa.getjButtonRemoverTelefone().setVisible(false);
        pnlCadastrarTenistaDeMesa.getjButtonAdicionarPremiacao().setVisible(false);
        pnlCadastrarTenistaDeMesa.getjButtonRemoverPremiacao().setVisible(false);
    }
    
    private void carregarAtributosDoTenistaNosCamposDaJanelaComOsAtributosDoTenista(TenistaDeMesa tenistaDeMesa, PnlCadastrarTenistaDeMesa pnlCadastrarTenistaDeMesa){
        carregarAtributosInformacoesGerais(tenistaDeMesa, pnlCadastrarTenistaDeMesa);
        carregarAtributosEndereco(tenistaDeMesa, pnlCadastrarTenistaDeMesa);
        carregarAtributosFichaTecnica(tenistaDeMesa, pnlCadastrarTenistaDeMesa);
    }
    
    private void carregarAtributosInformacoesGerais(TenistaDeMesa tenistaDeMesa, PnlCadastrarTenistaDeMesa pnlCadastrarTenistaDeMesa){
        pnlCadastrarTenistaDeMesa.getjTextFieldNome().setText(tenistaDeMesa.getNome());
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        pnlCadastrarTenistaDeMesa.getjTextFieldDataNascimento().setText(dateFormat.format(tenistaDeMesa.getDataNascimento()));
        pnlCadastrarTenistaDeMesa.getjTextFieldAltura().setText(""+tenistaDeMesa.getAltura());
        pnlCadastrarTenistaDeMesa.getjTextFieldPeso().setText(""+tenistaDeMesa.getPeso());
        if(tenistaDeMesa.getSexo() == CHAR_MASCULINO)
            pnlCadastrarTenistaDeMesa.getjComboBoxSexo().setSelectedIndex(INT_MASCULINO);
        else
            pnlCadastrarTenistaDeMesa.getjComboBoxSexo().setSelectedIndex(INT_FEMININO);
        pnlCadastrarTenistaDeMesa.getjTextFieldNomePai().setText(tenistaDeMesa.getNomePai());
        pnlCadastrarTenistaDeMesa.getjTextFieldNomeMae().setText(tenistaDeMesa.getNomeMae());
        pnlCadastrarTenistaDeMesa.getjTextFieldRg().setText(""+tenistaDeMesa.getRg());
        pnlCadastrarTenistaDeMesa.getjTextFieldCpf().setText(""+tenistaDeMesa.getCpf());
        for(String telefone : tenistaDeMesa.getTelefones()){
            pnlCadastrarTenistaDeMesa.getTelefonesListModel().addElement(telefone);
        }
    }
    
    private void carregarAtributosEndereco(TenistaDeMesa tenistaDeMesa, PnlCadastrarTenistaDeMesa pnlCadastrarTenistaDeMesa){
        pnlCadastrarTenistaDeMesa.getjTextFieldLogradouro().setText(tenistaDeMesa.getEndereco().getLogradouro());
        pnlCadastrarTenistaDeMesa.getjTextFieldNumero().setText(tenistaDeMesa.getEndereco().getNumero());
        pnlCadastrarTenistaDeMesa.getjTextFieldComplemento().setText(tenistaDeMesa.getEndereco().getComplemento());
        pnlCadastrarTenistaDeMesa.getjTextFieldBairro().setText(tenistaDeMesa.getEndereco().getBairro());
        pnlCadastrarTenistaDeMesa.getjTextFieldCidade().setText(tenistaDeMesa.getEndereco().getCidade());
        pnlCadastrarTenistaDeMesa.getjComboBoxEstado().setSelectedItem(tenistaDeMesa.getEndereco().getEstado());
        pnlCadastrarTenistaDeMesa.getjTextFieldPais().setText(tenistaDeMesa.getEndereco().getPais());
        pnlCadastrarTenistaDeMesa.getjTextFieldCep().setText(tenistaDeMesa.getEndereco().getCep());
    }
    
     private void carregarAtributosFichaTecnica(TenistaDeMesa tenistaDeMesa, PnlCadastrarTenistaDeMesa pnlCadastrarTenistaDeMesa){
        if(tenistaDeMesa.getCategoria() == CHAR_AMADOR)
            pnlCadastrarTenistaDeMesa.getjComboBoxCategoria().setSelectedIndex(INT_AMADOR);
        else
            pnlCadastrarTenistaDeMesa.getjComboBoxCategoria().setSelectedIndex(INT_PROFISSIONAL);
        
        if(tenistaDeMesa.getEstilo() == CHAR_ORTODOXO)
            pnlCadastrarTenistaDeMesa.getjComboBoxEstilo().setSelectedIndex(INT_ORTODOXO);
        else
            pnlCadastrarTenistaDeMesa.getjComboBoxEstilo().setSelectedIndex(INT_SOUTHPAW);
        
        pnlCadastrarTenistaDeMesa.getjTextFieldTotalPartidas().setText(""+tenistaDeMesa.getTotalPartidas());
        pnlCadastrarTenistaDeMesa.getjTextFieldTotalVitorias().setText(""+tenistaDeMesa.getTotalVitorias());
        pnlCadastrarTenistaDeMesa.getjTextFieldTotalDerrotas().setText(""+tenistaDeMesa.getTotalDerrotas());
        pnlCadastrarTenistaDeMesa.getjTextFieldTotalDesistencias().setText(""+tenistaDeMesa.getTotalDesistencias());
        for(Premiacao premiacao : tenistaDeMesa.getPremiacoes()){
            pnlCadastrarTenistaDeMesa.getPremiacaoListModel().addElement(premiacao);
        }
     }
    
    private void deletarTenistaDeMesa(String nome) throws TenistaInvalidoException{
        controleTenistaDeMesa.remover(nome);
    }
    
    private void bloquearCamposDaJanelaComOsAtributosDoTenista(PnlCadastrarTenistaDeMesa pnlCadastrarTenistaDeMesa){
        bloquearCamposJComponent(pnlCadastrarTenistaDeMesa);
    }
    
    private void bloquearCamposJComponent(JComponent jComponent){
        Object componentes[] = jComponent.getComponents();
        for(int i = 0; i < componentes.length; i++){
            if(componentes[i] instanceof JTextField){
                ((JTextField)componentes[i]).setEditable(false);
            }else if(componentes[i] instanceof JComboBox){
                ((JComboBox)componentes[i]).setEnabled(false);
            }else if(componentes[i] instanceof JComponent){
                bloquearCamposJComponent((JComponent)componentes[i]);
            }
        }
    }
}
